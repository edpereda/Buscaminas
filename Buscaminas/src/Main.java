
import static java.lang.Thread.sleep;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author eddyp
 */
public class Main extends javax.swing.JFrame {
    //cronometro
    int seg=0;
    int min=0;
    int hora=0;
    int mili=0;
    boolean estado = true;
    //cronometro
    String dificultad;
    int matriz_completa [][];
    String matriz_usuario [][];
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b_iniciar = new javax.swing.JButton();
        b_ingresar_coordenadas = new javax.swing.JButton();
        b_bandera = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_buscaminas = new javax.swing.JTextArea();
        lb1 = new javax.swing.JLabel();
        lb2 = new javax.swing.JLabel();
        //jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        b_iniciar.setText("INICIAR JUEGO");
        b_iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_iniciarActionPerformed(evt);
            }
        });

        b_ingresar_coordenadas.setText("INGRESAR_COORDENADAS");
        b_ingresar_coordenadas.setActionCommand("");
        b_ingresar_coordenadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_ingresar_coordenadasActionPerformed(evt);
            }
        });

        b_bandera.setText("COLOCAR BANDERA");
        b_bandera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_banderaActionPerformed(evt);
            }
        });

        t_buscaminas.setColumns(20);
        t_buscaminas.setRows(5);
        jScrollPane1.setViewportView(t_buscaminas);

        lb1.setBackground(new java.awt.Color(153, 153, 153));
        lb1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lb1.setForeground(new java.awt.Color(0, 0, 153));
        lb1.setText(" 00 : 00 : 00");

        lb2.setBackground(new java.awt.Color(153, 153, 153));
        lb2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lb2.setForeground(new java.awt.Color(0, 0, 153));
        lb2.setText("0000");

        /*jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });*/

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(b_iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                //.addComponent(jButton1)
                .addGap(60, 60, 60)
                .addComponent(lb1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lb2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_ingresar_coordenadas, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 255, Short.MAX_VALUE)
                        .addComponent(b_bandera, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_iniciar)
                    .addComponent(lb1)
                    .addComponent(lb2)
                   /*.addComponent(jButton1)*/)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_ingresar_coordenadas, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_bandera, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //CREAR MATRIZ DE BOTONES 9x9 16x16 16x30
    }//GEN-LAST:event_formWindowOpened

    private void b_iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_iniciarActionPerformed
        System.out.println("Dificultad seleccionada: "+dificultad);
        matriz_completa=enviar_comando(dificultad);
        matriz_usuario=rellenar_guion_matriz_usuario(matriz_completa,dificultad);
        //cronometro
        
        t_buscaminas=imprimir_text(dificultad, matriz_usuario, t_buscaminas);
        //CRONOMETRO SE INICIALIZA CON EL BOTON "INICIAR jUEGO" 
         estado =true;
      Thread hilo = new Thread(){
      public void run (){
      for(;;){
      if(estado==true){
      try{
          sleep(1);
          if(mili>=1000){
          mili= 0;
          seg++;
          
          }
      if(seg >=60){
          mili=0;
          seg=0;
          min++;
      } 
      if(min>=60){
      mili=0;    
      seg=0;
      min=0;
      hora++;
      
      
      }
      lb1.setText(hora+ "  :  "+min+ "  :  "+seg+ "  :  " );
      lb2.setText(""+mili);
      mili++;
      }
      catch(Exception e){
      }
      
      }
      else {
          break;
      }
      }
      }
      };
      hilo.start();
      // CRONOMETRO
    }//GEN-LAST:event_b_iniciarActionPerformed

    private void b_ingresar_coordenadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_ingresar_coordenadasActionPerformed
        int fila=Integer.parseInt(JOptionPane.showInputDialog("Ingrese el numero de fila: "));
        int columna=Integer.parseInt(JOptionPane.showInputDialog("Ingrese el numero de columna: "));
        
        matriz_usuario=actualizar_matriz(matriz_completa,matriz_usuario,fila,columna);
        if (matriz_usuario==null){
            //FIN DEL JUEGO
             estado= false;
            
            System.exit(0);
        }else{
            imprimir_matriz_usuario(dificultad,matriz_usuario);
            t_buscaminas=imprimir_text(dificultad,matriz_usuario,t_buscaminas);
            //Verificar si ya acabo el juego
            if (game_finished(matriz_usuario)){
                estado=false;
                Score s = new Score();
                s.putNewScore(seg, min, hora, dificultad);
                JOptionPane.showMessageDialog(null, "GANASTE!!!  FELICIDADES");
            }
        }
        
        
    }//GEN-LAST:event_b_ingresar_coordenadasActionPerformed

    private void b_banderaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_banderaActionPerformed
        int fila=Integer.parseInt(JOptionPane.showInputDialog("Ingrese el numero de fila: "));
        int columna=Integer.parseInt(JOptionPane.showInputDialog("Ingrese el numero de columna: "));
        
        matriz_usuario=colocar_bandera(matriz_completa,matriz_usuario,fila,columna);
        
        imprimir_matriz_usuario(dificultad,matriz_usuario);
        t_buscaminas=imprimir_text(dificultad,matriz_usuario,t_buscaminas);
        
        if (game_finished(matriz_usuario)){
            estado=false;
            Score s = new Score();
            s.putNewScore(seg, min, hora, dificultad);
            JOptionPane.showMessageDialog(null, "GANASTE!!!  FELICIDADES");
            }
    }//GEN-LAST:event_b_banderaActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_bandera;
    private javax.swing.JButton b_ingresar_coordenadas;
    private javax.swing.JButton b_iniciar;
    //private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb1;
    private javax.swing.JLabel lb2;
    private javax.swing.JTextArea t_buscaminas;
    // End of variables declaration//GEN-END:variables

    private int[][] enviar_comando(String dificultad) {
        int[][] matriz_f = new int[9][9];
        int[][] matriz_i = new int[16][16];
        int[][] matriz_d = new int[16][30];
        
            
        try {
            int pto=12000;
            InetAddress host = InetAddress.getByName("127.0.0.1");
            DatagramSocket cl = new DatagramSocket();
            
            String comando = dificultad;
            
            byte [] b_comando = comando.getBytes();
            
            DatagramPacket p_comando = new DatagramPacket(b_comando, b_comando.length, host, pto);          //Estas instrucciones sirven para enviar el comando al servidor
            System.out.println("Enviando comando: "+comando +" a: "+host);
            cl.send(p_comando);
            
            ///////////////////////////////////////////////////////////////////////////////////////
            if(dificultad.compareTo("f")==0){
                for (int f=0; f<9; f++){
                    for (int c=0; c<9; c++){
                        DatagramPacket pl = new DatagramPacket(new byte[65535], 65535);
                        cl.receive(pl);

                        String cadena_recibida = new String(pl.getData(),0,pl.getLength());
                        System.out.println("Valor recibido: "+cadena_recibida+"  -("+f+")("+c+")");
                        matriz_f[f][c]=Integer.parseInt(cadena_recibida);
                    }
                }
                return matriz_f;
            }
            if(dificultad.compareTo("i")==0){
                for (int f=0; f<16; f++){
                    for (int c=0; c<16; c++){
                        DatagramPacket pl = new DatagramPacket(new byte[65535], 65535);
                        cl.receive(pl);

                        String cadena_recibida = new String(pl.getData(),0,pl.getLength());
                        System.out.println("Valor recibido: "+cadena_recibida+"  -("+f+")("+c+")");
                        matriz_i[f][c]=Integer.parseInt(cadena_recibida);
                    }
                }
                return matriz_i;
            }
            if(dificultad.compareTo("d")==0){
                for (int f=0; f<16; f++){
                    for (int c=0; c<30; c++){
                        DatagramPacket pl = new DatagramPacket(new byte[65535], 65535);
                        cl.receive(pl);

                        String cadena_recibida = new String(pl.getData(),0,pl.getLength());
                        System.out.print("Valor recibido: "+cadena_recibida+"  -("+f+")("+c+")");
                        matriz_d[f][c]=Integer.parseInt(cadena_recibida);
                    }
                    System.out.println("\n");
                }
                return matriz_d;
            }
            
            
            cl.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
        
        
    }

    private String[][] rellenar_guion_matriz_usuario(int[][] matriz_completa, String dificultad1) {    
        
            if (dificultad1.compareTo("f")==0){
                String matrizf [][] = new String[9][9];
                for (int i = 0; i<9; i++){
                    for (int j = 0; j<9; j++){
                        matrizf[i][j]="-";
                    }
                }
                return matrizf;
            }
            if (dificultad1.compareTo("i")==0){
                String matrizi [][] = new String[16][16];
                for (int i = 0; i<16; i++){
                    for (int j = 0; j<16; j++){
                        matrizi[i][j]="-";
                    }
                }
                return matrizi;
            }
            if (dificultad1.compareTo("d")==0){
                String matrizd [][] = new String[30][16];
                for (int i = 0; i<30; i++){
                    for (int j = 0; j<16; j++){
                        matrizd[i][j]="-";
                    }
                }
                return matrizd;
            }
    return null;   
    }

    private String[][] actualizar_matriz(int[][] matriz_completa, String[][] matriz_usuario, int fila, int columna) {
        int fila_max=0;
        int col_max=0;
        if (dificultad.compareToIgnoreCase("f")==0){
            fila_max=9;
            col_max=9;
        }
        if (dificultad.compareToIgnoreCase("i")==0){
            fila_max=16;
            col_max=16;
        }
        if (dificultad.compareToIgnoreCase("d")==0){
            fila_max=30;
            col_max=16;
        }
        
        
            if (matriz_usuario[fila][columna].compareToIgnoreCase("-")==0){
                
                if (matriz_completa[fila][columna]!=-1){
                    if (matriz_completa[fila][columna]==0){
                        
                        matriz_usuario=encuentra_cero(matriz_completa,matriz_usuario,fila,columna,fila_max,col_max);//EN ESTA FUNCION ENTRA LA RECURSIVIDAD
                        
                    }else{//rebela el numero que esta en la matriz
                        matriz_usuario[fila][columna]=String.valueOf(matriz_completa[fila][columna]);
                        return matriz_usuario;
                    }
                }else{//La coordenada ingresada es una bomba
                     estado= false;
                    matriz_usuario[fila][columna]=String.valueOf(matriz_completa[fila][columna]);
                    JOptionPane.showMessageDialog(null, "Se encontro bomba. PERDISTE");
                     
                    return null;
                    
                }
                
            }else{//Por si ya se habia ingresado la coordenada
                JOptionPane.showMessageDialog(null, "Coordenada ya ingresada");
            }
        return matriz_usuario;
    }

    

    private void imprimir_matriz_usuario(String dificultad, String[][] matriz_usuario) {
        System.out.println("\n\n\n");
        
        if (dificultad.compareToIgnoreCase("f")==0){
            for (int i = 0; i<9; i++){
                System.out.print(i+"  ");
                
            }
            System.out.println("\n");
            for (int i = 0; i<9; i++){
                for (int j = 0; j<9; j++){
                    System.out.print(matriz_usuario[i][j]+"  ");
                }
                System.out.print("  &"+i+"\n");
            }
        }
        if (dificultad.compareToIgnoreCase("i")==0){
            for (int i = 0; i<16; i++){
                System.out.print(i+"  ");
            }
            for (int i = 0; i<16; i++){
                for (int j = 0; j<16; j++){
                    System.out.print(matriz_usuario[i][j]+"  ");
                }
                System.out.print("  &"+i+"\n");
            }
        }
        if (dificultad.compareToIgnoreCase("d")==0){
            for (int i = 0; i<16; i++){
                System.out.println(i+"  ");
            }
            for (int i = 0; i<30; i++){
                for (int j = 0; j<16; j++){
                    System.out.print(matriz_usuario[i][j]+"  ");
                }
                System.out.println("  &"+i+"\n");
            }
        }
    }

      private String[][] encuentra_cero(int[][] matriz_completa, String[][] matriz_usuario, int fila, int columna, int fila_max, int col_max) {
        //REBELAMOS LA CASILLA ACTUAL
        //matriz_usuario[fila][columna]=String.valueOf(matriz_completa[fila][columna]);
        //RECORREMOS CASILLAS VECINAS Y DESTAPAMOS
        int fila2=fila;
        int columna2=columna;
        

        // Tope de la recursion. Si Los indices de la matriz estan fuera de rango  
        if (columna <0 || columna >= col_max || fila <0 || fila >= fila_max)
        {
            return matriz_usuario;
        }
        // Segundo tope si la casilla ya se ha visitado o se marco como mandera
        if( matriz_usuario[fila][columna].equals(  "*") ||  matriz_usuario[fila][columna].equals( "0") )
        {
            return matriz_usuario;
        }
        // Tercer tope de la recursion el valor de la matriz es diferente de cero por lo que NO se vuelve a enviar 
        if (matriz_completa[fila][columna]!=0)
        {
            
            matriz_usuario[fila][columna]=String.valueOf(matriz_completa[fila][columna]);
            return matriz_usuario;
        }
        // Tercer tope d
      // Ahora se aplica la funcion a los vecinos de la celula
        else
        {
            // verificamos que la celda no se a marcado con bandera ni se ha visitado
           
            // Se destapa el valor de la celula
            matriz_usuario[fila][columna]=String.valueOf(matriz_completa[fila][columna]);
            /**
             *  fila-1, columna-1    fila-1, columna   fila-1,columna+1
             
             *  fila, columna-1    fila, columna   fila,columna+1
    
             *  fila+1, columna-1    fila+1, columna   fila+1,columna+1
             */
            
            // fila - 1 columna -1
            matriz_usuario =  encuentra_cero(matriz_completa, matriz_usuario, fila-1, columna-1, fila_max, col_max);
             // fila - 1 columna 
            matriz_usuario =  encuentra_cero(matriz_completa, matriz_usuario, fila-1, columna, fila_max, col_max);
             // fila - 1 columna +1
            matriz_usuario =  encuentra_cero(matriz_completa, matriz_usuario, fila-1, columna+1, fila_max, col_max);
             // fila  columna -1

             matriz_usuario =  encuentra_cero(matriz_completa, matriz_usuario, fila, columna-1, fila_max, col_max);
             // fila - 1 columna -1
            matriz_usuario =  encuentra_cero(matriz_completa, matriz_usuario, fila, columna+1, fila_max, col_max);
             // fila - 1 columna -1
            matriz_usuario =  encuentra_cero(matriz_completa, matriz_usuario, fila+1, columna-1, fila_max, col_max);
             // fila - 1 columna -1
            matriz_usuario =  encuentra_cero(matriz_completa, matriz_usuario, fila+1, columna, fila_max, col_max);
             // fila - 1 columna -1
            matriz_usuario =  encuentra_cero(matriz_completa, matriz_usuario, fila+1, columna+1, fila_max, col_max);
            
        }
        
       
        return matriz_usuario;
    }

    private String[][] colocar_bandera(int[][] matriz_completa, String[][] matriz_usuario, int fila, int columna) {
        matriz_usuario[fila][columna]="*";
        return matriz_usuario;
    }

    private JTextArea imprimir_text(String dificultad, String[][] matriz_usuario, JTextArea t_buscaminas) {
        t_buscaminas.setText("");
        if (dificultad.compareToIgnoreCase("f")==0){
            for (int i = 0; i<9; i++){
                t_buscaminas.append(i+"\t");
            }
            
            t_buscaminas.append("\n");
            for (int i = 0; i<9; i++){
                for (int j = 0; j<9; j++){
                    t_buscaminas.append(matriz_usuario[i][j]+"\t");
                }
                t_buscaminas.append("\t&"+i+"\n");
            }
        }
        if (dificultad.compareToIgnoreCase("i")==0){
            for (int i = 0; i<16; i++){
                t_buscaminas.append(i+"\t");
            }
            t_buscaminas.append("\n");
            for (int i = 0; i<16; i++){
                for (int j = 0; j<16; j++){
                    t_buscaminas.append(matriz_usuario[i][j]+"\t");
                }
                t_buscaminas.append("\t&"+i+"\n");
            }
        }
        if (dificultad.compareToIgnoreCase("d")==0){
            for (int i = 0; i<16; i++){
                t_buscaminas.append(i+"\t");
            }
            t_buscaminas.append("\n");
            for (int i = 0; i<30; i++){
                for (int j = 0; j<16; j++){
                    t_buscaminas.append(matriz_usuario[i][j]+"\t");
                }
                t_buscaminas.append("\t&"+i+"\n");
            }
        }
    return t_buscaminas;
    }

    private boolean game_finished(String[][] matriz_usuario) {
        
        if (dificultad.compareTo("f")==0){
            for (int i =0; i<9 ; i++){
                for (int j = 0; j<9; j++){
                    if (matriz_usuario[i][j].compareToIgnoreCase("-")==0)
                        return false;
                }
            }
        }
        if (dificultad.compareTo("i")==0){
            for (int i =0; i<16 ; i++){
                for (int j = 0; j<16; j++){
                    if (matriz_usuario[i][j].compareToIgnoreCase("-")==0)
                        return false;
                }
            }
        }
        if (dificultad.compareTo("d")==0){
            for (int i =0; i<16 ; i++){
                for (int j = 0; j<30; j++){
                    if (matriz_usuario[i][j].compareToIgnoreCase("-")==0)
                        return false;
                }
            }
        }
        return true;
    }

    
}
